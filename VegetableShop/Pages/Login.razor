@page "/login"
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using VegetableShop.Authentication
@using VegetableShop.Services

@inject ProtectedLocalStorage LocalStorage
@inject UserService userService
@inject RoleService roleService
@inject IJSRuntime js
@inject NavigationManager navManager

@if (@Load == "!ok")
{
    <div id="preloder">
        <div class="loader"></div>
    </div>
}
<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>LOGIN</h3>
        </div>
        <div class="mb-3">
            <label>User Name</label>
            <input @bind="model.UserName" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label>Password</label>
            <input @bind="model.Password" type="password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private string Load = null;
    private class Model
    {
        public string UserName { get; set; }
        public string Password { get; set; }
    }

    private Model model = new Model();
    private string TxtFromLocalStorage = string.Empty;

    protected async Task Check()
    {

        //Logout
        //await LocalStorage.DeleteAsync("UserSession");

        //Get UserSession from localstorage
        var result = await LocalStorage.GetAsync<string>("UserSession");
        TxtFromLocalStorage = result.Success ? result.Value : "Can't read local storage";
    }


    /*private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.UserName);
        if (userAccount == null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            UserName = userAccount.UserName,
            Role = userAccount.Role
        });
        navManager.NavigateTo("/", true);
    }*/
    private async Task Authenticate()
    {
        Load = "!ok";

        var userAccount = await userService.GetUsersByUserNameAndPasswordAsync(model.UserName, model.Password);
        if (userAccount == null)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }


        var authState1 = new CustomAuthenticationStateProvider(new UserSession
        {
            UserName = userAccount.user_name,
            Role = userAccount.roles.role_name
        });

        var authState = await authState1.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {

            await LocalStorage.SetAsync("UserSession", user.Identity.Name);

            //Get role name from user Identity
            //TxtFromLocalStorage = user.Claims.Last().Value + " is authenticated.";
            Load = "ok";
            await js.InvokeVoidAsync("alert", "Login Success !");
            navManager.NavigateTo("/", true);
        }
        else
        {
            Load = "ok";
            TxtFromLocalStorage = "The user is NOT authenticated.";
        }
    }

}